from sqlalchemy.orm import relationship
from sqlalchemy.dialects import postgresql
from sqlalchemy import Column, String, Float, DateTime

from patton_server.dal.database import Base
from . import fields


class Vuln(Base):
    __tablename__ = 'vuln'

    id = Column(String, primary_key=True)
    published = Column(DateTime)
    last_modified = Column(DateTime)
    cwe = Column(String)
    summary = Column(String)

    references = postgresql.ARRAY(String)
    prods = relationship('VulnProduct', back_populates='vuln')

    # -------------------------------------------------------------------------
    # CVSS
    # -------------------------------------------------------------------------
    cvss_score = Column(Float)
    cvss_access_vector = Column(String)
    cvss_access_complexity = Column(String)
    cvss_authentication = Column(String)
    cvss_confidentiality_impact = Column(String)
    cvss_integrity_impact = Column(String)
    cvss_availability_impact = Column(String)
    cvss_source = Column(String)

    def loader_map(root, existing_cves: set = None):
        results = []
        results_append = results.append
        for vuln in root.iter('{*}entry'):
            cve = vuln.attrib['id']

            if cve in existing_cves:
                continue

            # -----------------------------------------------------------------
            # Add CVSS info
            # -----------------------------------------------------------------
            try:
                cvss = next(vuln.iter('{*}base_metrics'))  # Get first element
                cvss_score = float(cvss.find('{*}score').text)
                cvss_vector = cvss.find('{*}access-vector').text
                cvss_complexity = cvss.find('{*}access-complexity').text
                cvss_authentication = cvss.find('{*}authentication').text
                cvss_confidentiality_impat = cvss.find(
                    '{*}confidentiality-impact').text
                cvss_integrity_impact = cvss.find('{*}integrity-impact').text
                cvss_availability_impact = cvss.find(
                    '{*}availability-impact').text
                cvss_source = cvss.find('{*}source').text
            except:
                # CVE haven't CVSS
                cvss_score = None
                cvss_vector = None
                cvss_complexity = None
                cvss_authentication = None
                cvss_confidentiality_impat = None
                cvss_integrity_impact = None
                cvss_availability_impact = None
                cvss_source = None

            results_append((
                cve,
                fields.datetimep(vuln.find('{*}published-datetime').text),
                fields.datetimep(vuln.find('{*}last-modified-datetime').text),
                fields.cwe(vuln),
                vuln.find('{*}summary').text,
                cvss_score,
                cvss_vector,
                cvss_complexity,
                cvss_authentication,
                cvss_confidentiality_impat,
                cvss_integrity_impact,
                cvss_availability_impact,
                cvss_source,
                [ref.attrib['href'] for ref in vuln.iter('{*}reference')]
            ))

        return results