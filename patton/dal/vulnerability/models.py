from sqlalchemy import Column, String, Float, ForeignKey
from sqlalchemy.orm import relationship

from ..database import Base
from . import fields


class Vuln(Base):
    __tablename__ = 'vuln'
    id = Column(String, primary_key=True)
    # published = Column(DateTime)
    # last_modified = Column(DateTime)
    cwe = Column(String)
    summary = Column(String)

    references = relationship('VulnReference', backref='vuln_reference')
    score = relationship('VulnScore', backref='vuln_score')
    prods = relationship('VulnProduct', back_populates='vuln')

    def loader_map(root):
        return [
            {
                'id': vuln.attrib['id'],
                'published': fields.datetimep(vuln.find('{*}published-datetime').text),
                'last_modified': fields.datetimep(vuln.find('{*}last-modified-datetime').text),
                'cwe': fields.cwe(vuln),
                'summary': vuln.find('{*}summary').text,
            }
            for vuln in root.iter('{*}entry')
        ]


class VulnReference(Base):
    __tablename__ = 'vuln_reference'
    id = Column(String, primary_key=True, default=fields.uuid)
    vuln_id = Column(String, ForeignKey('vuln.id'))
    lang = Column(String)
    reference_type = Column(String)
    score = Column(String)
    href = Column(String)
    href_description = Column(String)

    def loader_map(root):
        return [
            {
                'id': fields.uuid(),
                'vuln_id': ref.getparent().getparent().attrib['id'],
                'lang': ref.attrib['{http://www.w3.org/XML/1998/namespace}lang'],
                'reference_type': ref.getparent().attrib['reference_type'],
                'source': ref.getparent().find('{*}source').text,
                'href': ref.attrib['href'],
                'href_description': ref.text,
            }
            for ref in root.iter('{*}reference')
        ]

    def to_dict(self) -> dict:
        return {
            'id': self.id,
            'vuln_id': self.vuln_id,
            'lang': self.lang,
            'reference_type': self.reference_type,
            'source': self.source,
            'href': self.href,
            'href_description': self.description,
        }


class VulnScore(Base):
    __tablename__ = 'vuln_score'
    id = Column(String, primary_key=True, default=fields.uuid)
    vuln_id = Column(String, ForeignKey('vuln.id'))
    score = Column(Float)
    access_vector = Column(String)
    access_complexity = Column(String)
    authentication = Column(String)
    confidentiality_impact = Column(String)
    integrity_impact = Column(String)
    availability_impact = Column(String)
    source = Column(String)

    def loader_map(root):
        return [
            {
                'id': fields.uuid(),
                'vuln_id': metric.getparent().getparent().attrib['id'],
                'score': float(metric.find('{*}score').text),
                'access_vector': metric.find('{*}access-vector').text,
                'access_complexity': metric.find('{*}access-complexity').text,
                'authentication': metric.find('{*}authentication').text,
                'confidentiality_impact': metric.find('{*}confidentiality-impact').text,
                'integrity_impact': metric.find('{*}integrity-impact').text,
                'availability_impact': metric.find('{*}availability-impact').text,
                'source': metric.find('{*}source').text,
            }
            for metric in root.iter('{*}base_metrics')
        ]


# TODO: ensure many to many relation instead of FK
class VulnProduct(Base):
    __tablename__ = 'vuln_product'
    id = Column(String, primary_key=True, default=fields.uuid)
    vuln = Column(String, ForeignKey('vuln.id'))
    product = Column(String)

    def loader_map(root):
        return [
            {
                'id': fields.uuid(),
                'vuln': prod.getparent().getparent().attrib['id'],
                'product': prod.text,
            }
            for prod in root.iter('{*}product')
        ]
