#!/usr/bin/env python3

import sys
import json
from itertools import takewhile
from functools import partial


_processors = []


def case(f):
    global _processors
    _processors.append(f)

    return f


def preserve_lineage(parent, child):
    return {'meta': {'ingest': {k: v
                                for k, v in parent.items()
                                if k != 'meta'},
                     **parent},
            **child}


def strip_affixes(separator, prefixes, suffixes, text):
    tokens = text.split(separator)
    start = 0

    if len(tokens) == 1:
        return text

    if tokens[0] in prefixes:
        start = 1

    def is_not_suffix(part):
        return part not in suffixes

    processed = takewhile(is_not_suffix, tokens[start:])

    return separator.join(processed)


debian_affix_processor = partial(
    strip_affixes,
    "-",
    ('python3', 'python2', 'python'),
    ('dbg', 'dev', 'doc', 'examples', 'minimal', 'plugins', 'extra',
     'perl', 'jni', 'java', 'ruby1.9', 'ruby1.8', 'ruby'))


@case
def debian_status_file(meta, data):
    if meta['source'] != 'debian' or meta['type'] != 'status file':
        return None
    processed = dict()

    # TODO: explain why this is the case
    # http://deb.debian.org/debian/pool/main/u/util-linux/util-linux_2.33.1-0.1.dsc
    if data['source'] == "":
        software_candidate = data['package']
    else:
        software_candidate = data['source']
    processed['version'] = data['version']
    software_candidate = debian_affix_processor(software_candidate)

    # Drop lib prefix
    if software_candidate.startswith("lib"):
        software_candidate = software_candidate[len("lib"):]

    processed['software'] = software_candidate

    return processed


def strip_affixes_old(prefixes, suffixes, text):
    for prefix in prefixes:
        if text.startswith(prefix):
            text = text[len(prefix):]
    for suffix in suffixes:
        if text.startswith(prefix):
            text = text[:len(prefix)]
    return text


# TODO: run all processors that yield not None
# this will tackle cases such as 'liberty', 'lib' is not a proper prefix in
# this case
if __name__ == "__main__":
    for line in sys.stdin:
        data = json.loads(line)
        meta = data['meta']
        findings = [preserve_lineage(data, found)
                    for processor in _processors
                    if found := processor(meta, data) is not None]
        if findings:
            for found in findings:
                json.dump(found, sys.stdout)
        else:
            sys.stderr.write(line)
