*
- https://lists.debian.org/debian-tex-maint/2007/06/msg00018.html
- dpkg-query
- /var/lib/dpkg/status
  - can be obtained by dpkg-query --status, but for some unfathomable reason,
dpkg-query version 1.19.0.5 as included in latest ubuntu docker image, fails
with an error of "dpkg-query: error: --status needs at least one package name
argument"
  It works with debian stable (10.3) and later, and with ubuntu 19.10 and later, but it does not work with ubuntu 18.04
  - https://manpages.debian.org/buster/dpkg/dpkg-query.1.en.html
  - http://manpages.ubuntu.com/manpages/trusty/man1/dpkg-query.1.html

- http://deb.debian.org/debian/pool/main/a/attr/attr_2.4.48-4.dsc
- http://manpages.ubuntu.com/manpages/xenial/man1/dpkg-query.1.html
- dpkg-query --show --showformat='Package: "${Package}"\tSource: "${Source}"\tVersion: "${Version}"\n'
  - The field "Source" will be available only if the Package and the Source package are not the same
  - The Source package should be used if available
  - The version may include an epoch prefix that should be dealt with
- https://www.debian.org/doc/debian-policy/ here we'll be able to determine the naming conventions
that apply (e.g., python libraries get named python-somelib or python2-somelib)
  - https://www.debian.org/doc/packaging-manuals/python-policy/module_packages.html#package_names
  - https://www.debian.org/doc/packaging-manuals/perl-policy/ch-module_packages.html#s-package-names
* César proposes this for handling complexity

cat /var/lib/dpkg/status | <produce json lines enriching the content | simple program that generates the data to work on, considering meta-data | finally, patton


   meta:
       source: "debian"
       type: "status file"
   data:
       source: "util-linux"
       package: "fdisk"
       version: "2.1.0-1ubuntu"

which can be easily transformed to JSON with https://onlinejsontools.com/convert-yaml-to-json
{"meta":{"source":"debian","type":"status file"},"data":{"source":"util-linux","package":"fdisk","version":"2.1.0-1ubuntu"}}


docker run -it ubuntu:bionic dpkg-query --show --showformat='{"meta":{"source":"debian","type":"status file"},"data":{"source":"${Source}","package":"${Package}","version":"${Version}"}}\n'


Luego lo pasas por un programa que lo entiende que le dará a Patton uno (o más) datos a consultar

   meta:
       source: "debian"
       type: "status file"
       original:
           data:
               source: "util-linux"
               package: "fdisk"
              version: "2.1.0-1ubuntu"
   query:
         software: "ufil-lib"
        version: "2.1.0"

a lo mejor original sin la anidación de data es suficiente

procura que en tus pipelines de datos no se pierda la información si puedes evitarlo
evitarás código basado en suposiciones si necesitas filtrar
esta técnica se llama linaje¹

¹: https://en.wikipedia.org/wiki/Data_lineage
